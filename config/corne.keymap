/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>

#define HOST_OS 2

#include "helper.h"
#include "./keypos_def/keypos_36keys.h"
#include "./international_chars/swedish.dtsi"
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    tapping-term-ms = <400>;
};

/ {
    combos {
        compatible = "zmk,combos";

        Escape {
            bindings = <&kp ESCAPE>;
            key-positions = <16 19>;
        };
    };
    behaviors {
        bhm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;    // <---[[moderate duration]]
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            label = "Base";
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E     &kp R                   &kp T    &kp Y  &kp U                   &kp I      &kp O    &kp P          &kp LEFT_BRACKET
&kp LCTRL  &kp A  &kp S  &kp D     &kp F                   &kp G    &kp H  &kp J                   &kp K      &kp L    &kp SEMICOLON  &kp SQT
&kp GRAVE  &kp Z  &kp X  &kp C     &kp V                   &kp B    &kp N  &kp M                   &kp COMMA  &kp DOT  &kp SLASH      &kp BACKSPACE
                         &kp LGUI  &bhm LEFT_SHIFT RETURN  &mo 1    &mo 2  &kp SPACE  &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            label = "Lower";
            bindings = <
&kp TAB     &kp N1        &kp N2        &kp N3        &kp N4        &kp N5          &kp N6    &kp N7     &kp N8    &kp N9     &kp N0  &kp BSPC
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp LEFT  &kp DOWN   &kp UP    &kp RIGHT  &trans  &trans
&kp LSHFT   &trans        &trans        &trans        &trans        &trans          &trans    &trans     &trans    &trans     &trans  &trans
                                        &kp LGUI      &kp RET       &trans          &trans    &kp SPACE  &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            label = "Raise";
            bindings = <
&kp GRAVE  &kp EXCLAMATION  &kp AT_SIGN  &kp HASH          &kp LA(N4)  &kp PERCENT    &kp RS(AMPERSAND)  &kp AMPERSAND   &kp ASTERISK    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp RS(MINUS)
&kp LCTRL  &kp N1     &kp N2       &kp N3      &kp N4    &kp N5         &kp MINUS          &kp LA(N7)      &kp LA(N8)      &kp LA(N9)            &kp LA(LS(N7))         &kp EQUAL
&kp LSHFT  &kp N6     &kp N7       &kp N8  &kp N9          &kp N0         &kp QUESTION       &kp LA(LS(N7))  &kp LA(LS(N7))  &kp LA(LS(N0))        &kp LA(N7)             &kp GRAVE
                                         &kp LGUI          &kp RET         &trans         &trans             &kp SPACE       &kp RALT
            >;
        };
    };
};
