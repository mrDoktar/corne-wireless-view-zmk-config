/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define HOST_OS 2

#define MO_TOG(layer) &mo_tog layer layer

#include "helper.h"
#include "./keypos_def/keypos_36keys.h"
#include "./international_chars/swedish.dtsi"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt { tapping-term-ms = <400>; };

/ {
    combos {
        compatible = "zmk,combos";

        Escape {
            bindings = <&kp ESCAPE>;
            key-positions = <16 19>;
        };

        LShift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <15 16>;
        };

        RShift {
            bindings = <&kp RIGHT_SHIFT>;
            key-positions = <19 20>;
        };

        Shift {
            bindings = <&kp LSHIFT>;
            key-positions = <37 40>;
            timeout-ms = <100>;
            layers = <0>;
        };

        function_layer {
            bindings = <&mo 3>;
            key-positions = <38 39>;
        };
    };

    behaviors {
        mo_tog: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&tog>;
        };

        hml: balanced_homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            #binding-cells = <2>;
            tapping-term-ms = <280>;    // <---[[moderate duration]]
            quick-tap-ms = <175>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            hold-trigger-on-release;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <6 18 8 9 7 10 11 23 35 34 22 21 20 19 30 32 31 33 41 40 39 38 37 36>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            hold-trigger-on-release;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <41 40 39 38 37 36 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29>;
        };
    };

    macros {
        vim_write: vim_write {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp GT &kp W &kp RET>;
            label = "VIM_WRITE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // —————————————————————————————————   —————————————————————————————————
            // | ESC | q | w |  e  |  r  |  t  |   |  y  |  u  |  i  | o | p |  å  |
            // | CTRL| a | s |  d  |  f  |  g  |   |  h  |  j  |  k  | l | ö |  ä  |
            // | TAB | z | x |  c  |  v  |  b  |   |  n  |  m  |  ,  | . | - | BKS |
            //               | GUI | ENT | RSE |   | LWR | SPC | ALT |
            //               ———————————————————   ———————————————————

            label = "Base";
            bindings = <
&kp ESC    &kp Q              &kp W  &kp E     &kp R    &kp T          &kp Y        &kp U      &kp I      &kp O    &kp P                       &kp LEFT_BRACKET
&kp LCTRL  &hml LEFT_SHIFT A  &kp S  &kp D     &kp F    &kp G          &kp H        &kp J      &kp K      &kp L    &hmr RIGHT_SHIFT SEMICOLON  &kp SQT
&kp TAB    &kp Z              &kp X  &kp C     &kp V    &kp B          &kp N        &kp M      &kp COMMA  &kp DOT  &kp SLASH                   &kp BACKSPACE
                                     &kp LGUI  &kp RET  &mo_tog 2 0    &mo_tog 1 2  &kp SPACE  &kp RALT
            >;
        };

        lower_layer {
            // ———————————————————————————————————   ———————————————————————————————
            // | ESC  | ! | " |  #  |  $  |  %  |   |  &  |  |  |  [  | ] | = | ? |
            // | CTRL | @ | ' |  ´  |     |     |   |  +  |  /  |  (  | ) | ; | ^ |
            // | SFT  | < | ~ |     |     |     |   |  _  |  \  |  {  | } | : |   |
            //                | GUI | ENT | LWR |   | RSE | SPC | ALT |
            //                 ———————————————————   ———————————————————

            label = "Lower";
            bindings = <
&kp ESC         &kp EXCLAMATION   &kp AT_SIGN            &kp HASH   &kp LA(N4)  &kp PERCENT    &kp RS(N6)    &kp LA(N7)      &kp LA(N8)      &kp LA(N9)            &kp RIGHT_PARENTHESIS  &kp RS(MINUS)
&kp LCTRL       &kp RA(NUMBER_2)  &kp BACKSLASH          &kp EQUAL  &trans      &trans         &kp MINUS     &kp AMPERSAND   &kp ASTERISK    &kp LEFT_PARENTHESIS  &kp LS(COMMA)          &kp LS(RIGHT_BRACKET)
&kp LEFT_SHIFT  &kp GRAVE         &kp LA(RIGHT_BRACKET)  &trans     &trans      &trans         &kp QUESTION  &kp LA(LS(N7))  &kp LA(LS(N8))  &kp LA(LS(N9))        &kp LS(DOT)            &trans
                                                         &kp LGUI   &kp RET     &trans         &trans        &kp SPACE       &kp RALT
            >;
        };

        raise_layer {
            // —————————————————————————————————   ———————————————————————————————
            // | BTj | / | 7 |  8  |  9  |  *  |   | HME |     | PUP |   |   |   |
            // | BT1 | = | 4 |  5  |  6  |  -  |   |  ⬅  |  ⬇  |  ⬆  | ➡ |   |   |
            // | BT2 | 0 | 1 |  2  |  3  |  +  |   |     | PDN |     |   |   |   |
            //               | GUI | ENT | LWR |   | RSE | SPC | ALT |
            //               ———————————————————   ———————————————————

            label = "Raise";
            bindings = <
&bt BT_SEL 0    &kp AMPERSAND          &kp N7  &kp N8        &kp N9   &kp RS(BACKSLASH)    &kp LG(LEFT_ARROW)  &trans         &kp PAGE_UP  &kp RG(RIGHT)  &trans  &trans
&bt BT_SEL 1    &kp RIGHT_PARENTHESIS  &kp N4  &kp N5        &kp N6   &kp SLASH            &kp LEFT            &kp DOWN       &kp UP       &kp RIGHT      &trans  &trans
&kp LEFT_SHIFT  &kp N0                 &kp N1  &kp N2        &kp N3   &kp MINUS            &trans              &kp PAGE_DOWN  &trans       &trans         &trans  &trans
                                               &kp LEFT_GUI  &kp RET  &trans               &mo_tog 3 4         &kp SPACE      &kp RALT
            >;
        };

        function_layer {
            // ——————————————————————————————————   —————————————————————————————————————
            // | F1 | F2 | F3 |  F4 |  F5 |  F6 |   |  F7 |  F8  |  F9  | F10 | F11 | F12 |
            // |    | :w |    |     |     |     |   | pre | vol+ | vol- | nex |     |     |
            // |    |    |    |     |     |     |   |     | MUTE | PLAY |     |     |     |
            //                | GUI | ENT | LWR |   | RSE | SPC  | ALT  |
            //                ———————————————————   —————————————————————
            //

            bindings = <
&kp F1  &kp F2                &kp F3                &kp F4                &kp F5                &kp F6    &kp F7          &kp F8             &kp F9            &kp F10     &kp F11  &kp F12
&trans  &vim_write            &kp LS(LG(NUMBER_4))  &trans                &trans                &trans    &kp C_PREVIOUS  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP   &kp C_NEXT  &trans   &trans
&trans  &kp LS(LG(NUMBER_0))  &kp LS(LG(NUMBER_1))  &kp LS(LG(NUMBER_2))  &kp LS(LG(NUMBER_3))  &trans    &trans          &kp K_MUTE         &kp C_PLAY_PAUSE  &trans      &trans   &kp DELETE
                                                    &trans                &trans                &trans    &trans          &trans             &trans
            >;

            label = "Function";
        };

        number_layer {
            bindings = <
&none  &none  &none  &none  &none  &none    &kp ASTERISK  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp PLUS   &kp EQUAL
&none  &none  &none  &none  &none  &none    &kp SLASH     &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp MINUS  &none
&none  &none  &none  &none  &none  &none    &kp N0        &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp DOT    &none
                     &none  &none  &none    &to 0         &none         &none
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
